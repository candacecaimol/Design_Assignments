
DA2T2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000092  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b1  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012d  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>

int main(void)
{
	DDRC |= 0x01;			//enable PC0 as output
  80:	38 9a       	sbi	0x07, 0	; 7
	DDRD |= 0xFF;			//enable PB0-PB7 as output
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1 << PC0);	//initialize PC0 to 0
  88:	40 9a       	sbi	0x08, 0	; 8
	PORTD = 0x00;			//initialize binary counter to 0	
  8a:	1b b8       	out	0x0b, r1	; 11
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1 
  8c:	c4 e8       	ldi	r28, 0x84	; 132
  8e:	d0 e0       	ldi	r29, 0x00	; 0
		TCCR1A = 0x00;		//Normal mode
  90:	a0 e8       	ldi	r26, 0x80	; 128
  92:	b0 e0       	ldi	r27, 0x00	; 0
		TCCR1B = 0x03;		//Prescaler value 
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	43 e0       	ldi	r20, 0x03	; 3
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
		{
										//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  9a:	91 e0       	ldi	r25, 0x01	; 1
	DDRD |= 0xFF;			//enable PB0-PB7 as output
	PORTC |= (1 << PC0);	//initialize PC0 to 0
	PORTD = 0x00;			//initialize binary counter to 0	
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1 
  9c:	2e ee       	ldi	r18, 0xEE	; 238
  9e:	35 e8       	ldi	r19, 0x85	; 133
  a0:	39 83       	std	Y+1, r19	; 0x01
  a2:	28 83       	st	Y, r18
		TCCR1A = 0x00;		//Normal mode
  a4:	1c 92       	st	X, r1
		TCCR1B = 0x03;		//Prescaler value 
  a6:	40 83       	st	Z, r20
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
  a8:	b0 9b       	sbis	0x16, 0	; 22
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>
		{
										//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
  ac:	10 82       	st	Z, r1
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  ae:	96 bb       	out	0x16, r25	; 22
		PORTC ^= 1;						//toggle PC0 
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	89 27       	eor	r24, r25
  b4:	88 b9       	out	0x08, r24	; 8
		if ((PORTC & (1 << 0)) == 1)	//if PC0 is set
  b6:	40 9b       	sbis	0x08, 0	; 8
  b8:	f3 cf       	rjmp	.-26     	; 0xa0 <main+0x20>
		{
			PORTD += 1;						//increment binary counter
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	ef cf       	rjmp	.-34     	; 0xa0 <main+0x20>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
