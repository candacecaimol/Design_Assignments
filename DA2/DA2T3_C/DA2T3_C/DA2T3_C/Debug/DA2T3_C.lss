
DA2T3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a4  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000062  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c0  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000133  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000005b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

#include <avr/io.h>

int main(void)
{
	DDRC |= 0x31;			//enable PC0 as output
  90:	87 b1       	in	r24, 0x07	; 7
  92:	81 63       	ori	r24, 0x31	; 49
  94:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0xFF;			//enable PB0-PB7 as output
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (0 << PC0);	//initialize PC0 to 0
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00;			//initialize binary counter to 0
  a0:	1b b8       	out	0x0b, r1	; 11
	static int count = 0;	//used to count number of cycles
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
  a2:	0f 2e       	mov	r0, r31
  a4:	f4 e8       	ldi	r31, 0x84	; 132
  a6:	ef 2e       	mov	r14, r31
  a8:	f1 2c       	mov	r15, r1
  aa:	f0 2d       	mov	r31, r0
		TCCR1A = 0x00;		//Normal mode
  ac:	00 e8       	ldi	r16, 0x80	; 128
  ae:	10 e0       	ldi	r17, 0x00	; 0
		TCCR1B = 0x03;		//Prescaler value 64
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
		{
			//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  b4:	21 e0       	ldi	r18, 0x01	; 1
		PORTC ^= 1;						//toggle PC0
		if (PORTC & (1 << 0))	//if PC0 is set
		{
			PORTD += 1;						//increment binary counter
			count++;						//increment count
			if (count % 5 == 0)				//for every 5th count
  b6:	0f 2e       	mov	r0, r31
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	8f 2e       	mov	r8, r31
  bc:	91 2c       	mov	r9, r1
  be:	f0 2d       	mov	r31, r0
			{
				PORTC ^= (1 << PC5);		//toggle PC5
  c0:	68 94       	set
  c2:	bb 24       	eor	r11, r11
  c4:	b5 f8       	bld	r11, 5
			}
			if (count % 10 == 0)			//for every 10th count
  c6:	0f 2e       	mov	r0, r31
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	cf 2e       	mov	r12, r31
  cc:	d1 2c       	mov	r13, r1
  ce:	f0 2d       	mov	r31, r0
	static int count = 0;	//used to count number of cycles
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
		TCCR1A = 0x00;		//Normal mode
		TCCR1B = 0x03;		//Prescaler value 64
  d0:	33 e0       	ldi	r19, 0x03	; 3
	PORTC |= (0 << PC0);	//initialize PC0 to 0
	PORTD = 0x00;			//initialize binary counter to 0
	static int count = 0;	//used to count number of cycles
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
  d2:	ce ee       	ldi	r28, 0xEE	; 238
  d4:	d5 e8       	ldi	r29, 0x85	; 133
			{
				PORTC ^= (1 << PC5);		//toggle PC5
			}
			if (count % 10 == 0)			//for every 10th count
			{
				PORTC ^= (1 << PC4);		//toggle PC4
  d6:	40 e1       	ldi	r20, 0x10	; 16
	PORTC |= (0 << PC0);	//initialize PC0 to 0
	PORTD = 0x00;			//initialize binary counter to 0
	static int count = 0;	//used to count number of cycles
	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
  d8:	d7 01       	movw	r26, r14
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	dc 93       	st	X, r29
  de:	ce 93       	st	-X, r28
		TCCR1A = 0x00;		//Normal mode
  e0:	d8 01       	movw	r26, r16
  e2:	1c 92       	st	X, r1
		TCCR1B = 0x03;		//Prescaler value 64
  e4:	30 83       	st	Z, r19
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
  e6:	b0 9b       	sbis	0x16, 0	; 22
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x56>
		{
			//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
  ea:	10 82       	st	Z, r1
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  ec:	26 bb       	out	0x16, r18	; 22
		PORTC ^= 1;						//toggle PC0
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	82 27       	eor	r24, r18
  f2:	88 b9       	out	0x08, r24	; 8
		if (PORTC & (1 << 0))	//if PC0 is set
  f4:	40 9b       	sbis	0x08, 0	; 8
  f6:	f0 cf       	rjmp	.-32     	; 0xd8 <main+0x48>
		{
			PORTD += 1;						//increment binary counter
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	8b b9       	out	0x0b, r24	; 11
			count++;						//increment count
  fe:	80 91 00 01 	lds	r24, 0x0100
 102:	90 91 01 01 	lds	r25, 0x0101
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 01 01 	sts	0x0101, r25
 10c:	80 93 00 01 	sts	0x0100, r24
			if (count % 5 == 0)				//for every 5th count
 110:	b4 01       	movw	r22, r8
 112:	0e 94 9d 00 	call	0x13a	; 0x13a <__divmodhi4>
 116:	89 2b       	or	r24, r25
 118:	19 f4       	brne	.+6      	; 0x120 <main+0x90>
			{
				PORTC ^= (1 << PC5);		//toggle PC5
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	8b 25       	eor	r24, r11
 11e:	88 b9       	out	0x08, r24	; 8
			}
			if (count % 10 == 0)			//for every 10th count
 120:	80 91 00 01 	lds	r24, 0x0100
 124:	90 91 01 01 	lds	r25, 0x0101
 128:	b6 01       	movw	r22, r12
 12a:	0e 94 9d 00 	call	0x13a	; 0x13a <__divmodhi4>
 12e:	89 2b       	or	r24, r25
 130:	99 f6       	brne	.-90     	; 0xd8 <main+0x48>
			{
				PORTC ^= (1 << PC4);		//toggle PC4
 132:	88 b1       	in	r24, 0x08	; 8
 134:	84 27       	eor	r24, r20
 136:	88 b9       	out	0x08, r24	; 8
 138:	cf cf       	rjmp	.-98     	; 0xd8 <main+0x48>

0000013a <__divmodhi4>:
 13a:	97 fb       	bst	r25, 7
 13c:	07 2e       	mov	r0, r23
 13e:	16 f4       	brtc	.+4      	; 0x144 <__divmodhi4+0xa>
 140:	00 94       	com	r0
 142:	07 d0       	rcall	.+14     	; 0x152 <__divmodhi4_neg1>
 144:	77 fd       	sbrc	r23, 7
 146:	09 d0       	rcall	.+18     	; 0x15a <__divmodhi4_neg2>
 148:	0e 94 b1 00 	call	0x162	; 0x162 <__udivmodhi4>
 14c:	07 fc       	sbrc	r0, 7
 14e:	05 d0       	rcall	.+10     	; 0x15a <__divmodhi4_neg2>
 150:	3e f4       	brtc	.+14     	; 0x160 <__divmodhi4_exit>

00000152 <__divmodhi4_neg1>:
 152:	90 95       	com	r25
 154:	81 95       	neg	r24
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	08 95       	ret

0000015a <__divmodhi4_neg2>:
 15a:	70 95       	com	r23
 15c:	61 95       	neg	r22
 15e:	7f 4f       	sbci	r23, 0xFF	; 255

00000160 <__divmodhi4_exit>:
 160:	08 95       	ret

00000162 <__udivmodhi4>:
 162:	aa 1b       	sub	r26, r26
 164:	bb 1b       	sub	r27, r27
 166:	51 e1       	ldi	r21, 0x11	; 17
 168:	07 c0       	rjmp	.+14     	; 0x178 <__udivmodhi4_ep>

0000016a <__udivmodhi4_loop>:
 16a:	aa 1f       	adc	r26, r26
 16c:	bb 1f       	adc	r27, r27
 16e:	a6 17       	cp	r26, r22
 170:	b7 07       	cpc	r27, r23
 172:	10 f0       	brcs	.+4      	; 0x178 <__udivmodhi4_ep>
 174:	a6 1b       	sub	r26, r22
 176:	b7 0b       	sbc	r27, r23

00000178 <__udivmodhi4_ep>:
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	5a 95       	dec	r21
 17e:	a9 f7       	brne	.-22     	; 0x16a <__udivmodhi4_loop>
 180:	80 95       	com	r24
 182:	90 95       	com	r25
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
