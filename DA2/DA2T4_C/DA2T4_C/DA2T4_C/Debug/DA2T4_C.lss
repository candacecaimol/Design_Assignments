
DA2T4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ba  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007a  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000cb  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013e  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRC |= 0x31;			//enable PC0 as output
  90:	87 b1       	in	r24, 0x07	; 7
  92:	81 63       	ori	r24, 0x31	; 49
  94:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0xFF;			//enable PB0-PB7 as output
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (0 << PC0);	//initialize PC0 to 0
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00;			//initialize binary counter to 0
  a0:	1b b8       	out	0x0b, r1	; 11
	
	PCICR |= (1 << PCIE1);	//change on enabled pin on PCINT[14:8] will cause interrupt
  a2:	e8 e6       	ldi	r30, 0x68	; 104
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
	PCIFR |= (1 << PCIF1);	//PCIF1 becomes set on logic change in PCINT[14:8]
  ac:	d9 9a       	sbi	0x1b, 1	; 27
	PCMSK1 |= (1 << PCINT8);//pin change interrupt enabled on PCINT8 (PC0)
  ae:	ec e6       	ldi	r30, 0x6C	; 108
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
	
	sei();					//set interrupts
  b8:	78 94       	sei

	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
  ba:	c4 e8       	ldi	r28, 0x84	; 132
  bc:	d0 e0       	ldi	r29, 0x00	; 0
		TCCR1A = 0x00;		//Normal mode
  be:	a0 e8       	ldi	r26, 0x80	; 128
  c0:	b0 e0       	ldi	r27, 0x00	; 0
		TCCR1B = 0x03;		//Prescaler value 64
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	43 e0       	ldi	r20, 0x03	; 3
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
		{
			//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  c8:	91 e0       	ldi	r25, 0x01	; 1
	
	sei();					//set interrupts

	while (1)
	{
		TCNT1 = 0x85EE;		//starting value of Timer1
  ca:	2e ee       	ldi	r18, 0xEE	; 238
  cc:	35 e8       	ldi	r19, 0x85	; 133
  ce:	39 83       	std	Y+1, r19	; 0x01
  d0:	28 83       	st	Y, r18
		TCCR1A = 0x00;		//Normal mode
  d2:	1c 92       	st	X, r1
		TCCR1B = 0x03;		//Prescaler value 64
  d4:	40 83       	st	Z, r20
		while (!(TIFR1 & (1<<TOV1)))	//while no overflow
  d6:	b0 9b       	sbis	0x16, 0	; 22
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x46>
		{
			//keep cycling through timer
		}
		TCCR1B = 0x00;					//reset TCCR1B to 0
  da:	10 82       	st	Z, r1
		TIFR1 = 0x01;					//clear overflow flags by loading with 0x01
  dc:	96 bb       	out	0x16, r25	; 22
		PORTC ^= 1;						//toggle PC0
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	89 27       	eor	r24, r25
  e2:	88 b9       	out	0x08, r24	; 8
		if (PORTC & (1 << 0))	//if PC0 is set
  e4:	40 9b       	sbis	0x08, 0	; 8
  e6:	f3 cf       	rjmp	.-26     	; 0xce <main+0x3e>
		{
			PORTD += 1;						//increment binary counter
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	ef cf       	rjmp	.-34     	; 0xce <main+0x3e>

000000f0 <__vector_4>:
		}
	}
}

ISR (PCINT1_vect) //PC0 in the PCINT1_vect
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	static int count = 0;	//used to count cycles
	if (PORTC & (1 << 0))	//if PC0 is set
 108:	40 9b       	sbis	0x08, 0	; 8
 10a:	21 c0       	rjmp	.+66     	; 0x14e <__vector_4+0x5e>
	{
		count++;
 10c:	80 91 00 01 	lds	r24, 0x0100
 110:	90 91 01 01 	lds	r25, 0x0101
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 01 01 	sts	0x0101, r25
 11a:	80 93 00 01 	sts	0x0100, r24
		if (count % 5 == 0)				//for every 5th count
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 126:	89 2b       	or	r24, r25
 128:	21 f4       	brne	.+8      	; 0x132 <__vector_4+0x42>
		{
			PORTC ^= (1 << PC5);			//toggle PC5
 12a:	98 b1       	in	r25, 0x08	; 8
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	89 27       	eor	r24, r25
 130:	88 b9       	out	0x08, r24	; 8
		}
		
		if (count % 10 == 0)				//for every 10th count
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	90 91 01 01 	lds	r25, 0x0101
 13a:	6a e0       	ldi	r22, 0x0A	; 10
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 142:	89 2b       	or	r24, r25
 144:	21 f4       	brne	.+8      	; 0x14e <__vector_4+0x5e>
		{
			PORTC ^= (1 << PC4);			//toggle PC4
 146:	98 b1       	in	r25, 0x08	; 8
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	89 27       	eor	r24, r25
 14c:	88 b9       	out	0x08, r24	; 8
		}
	}
	return;
}
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__divmodhi4>:
 166:	97 fb       	bst	r25, 7
 168:	07 2e       	mov	r0, r23
 16a:	16 f4       	brtc	.+4      	; 0x170 <__divmodhi4+0xa>
 16c:	00 94       	com	r0
 16e:	07 d0       	rcall	.+14     	; 0x17e <__divmodhi4_neg1>
 170:	77 fd       	sbrc	r23, 7
 172:	09 d0       	rcall	.+18     	; 0x186 <__divmodhi4_neg2>
 174:	0e 94 c7 00 	call	0x18e	; 0x18e <__udivmodhi4>
 178:	07 fc       	sbrc	r0, 7
 17a:	05 d0       	rcall	.+10     	; 0x186 <__divmodhi4_neg2>
 17c:	3e f4       	brtc	.+14     	; 0x18c <__divmodhi4_exit>

0000017e <__divmodhi4_neg1>:
 17e:	90 95       	com	r25
 180:	81 95       	neg	r24
 182:	9f 4f       	sbci	r25, 0xFF	; 255
 184:	08 95       	ret

00000186 <__divmodhi4_neg2>:
 186:	70 95       	com	r23
 188:	61 95       	neg	r22
 18a:	7f 4f       	sbci	r23, 0xFF	; 255

0000018c <__divmodhi4_exit>:
 18c:	08 95       	ret

0000018e <__udivmodhi4>:
 18e:	aa 1b       	sub	r26, r26
 190:	bb 1b       	sub	r27, r27
 192:	51 e1       	ldi	r21, 0x11	; 17
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <__udivmodhi4_ep>

00000196 <__udivmodhi4_loop>:
 196:	aa 1f       	adc	r26, r26
 198:	bb 1f       	adc	r27, r27
 19a:	a6 17       	cp	r26, r22
 19c:	b7 07       	cpc	r27, r23
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <__udivmodhi4_ep>
 1a0:	a6 1b       	sub	r26, r22
 1a2:	b7 0b       	sbc	r27, r23

000001a4 <__udivmodhi4_ep>:
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	5a 95       	dec	r21
 1aa:	a9 f7       	brne	.-22     	; 0x196 <__udivmodhi4_loop>
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	bc 01       	movw	r22, r24
 1b2:	cd 01       	movw	r24, r26
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
